import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:provider/provider.dart';import 'package:time_tracker/app/common_widgets/form_submit_button.dart';import 'package:time_tracker/app/sign_in/email_sign_in_bloc.dart';import 'package:time_tracker/app/sign_in/email_sign_in_change_model.dart';import 'package:time_tracker/app/sign_in/validators.dart';import 'package:time_tracker/servises/auth.dart';import 'package:flutter/services.dart';import 'email_sign_in_model.dart';class EmailSignInFormNotifier extends StatefulWidget {  EmailSignInFormNotifier({@required this.model});  final EmailSignInChangeModel model;  static Widget create(BuildContext context) {    final AuthBase auth = Provider.of<AuthBase>(context);    return ChangeNotifierProvider<EmailSignInChangeModel>(      create: (context) => EmailSignInChangeModel(auth: auth),      child: Consumer<EmailSignInChangeModel>(        builder: (context, model, _) => EmailSignInFormNotifier(model: model),      ),    );  }  @override  _EmailSignInFormNotifierState createState() =>      _EmailSignInFormNotifierState();}class _EmailSignInFormNotifierState extends State<EmailSignInFormNotifier> {  final TextEditingController _emailEditingController = TextEditingController();  final TextEditingController _passwordEditingController =  TextEditingController();  final FocusNode _emailFocusNode = FocusNode();  final FocusNode _passwordFocusNode = FocusNode();  EmailSignInChangeModel get model => widget.model;  @override  void dispose() {    _emailEditingController.dispose();    _passwordEditingController.dispose();    _emailFocusNode.dispose();    _passwordFocusNode.dispose();    super.dispose();  }  Future<void> _submit() async {    try {      await model.submit();      Navigator.of(context).pop();    } on PlatformException catch (e) {      print(e.toString());      showDialog(          context: context,          builder: (context) {            return AlertDialog(              title: Text("Sign in failed"),              content: Text(e.message),              actions: <Widget>[                FlatButton(                  onPressed: () => Navigator.of(context).pop(),                  child: Text("OK"),                )              ],            );          });    }  }  void _emailEditingComplete() {    final newFocus = model.emailValidator.isValid(model.email)        ? _passwordFocusNode        : _emailFocusNode;    FocusScope.of(context).requestFocus(newFocus);  }  void _toggleFormType() {    model.toggleFormtype();    _emailEditingController.clear();    _passwordEditingController.clear();  }  List<Widget> _buildChildren() {    return [      TextField(        focusNode: _emailFocusNode,        controller: _emailEditingController,        decoration: InputDecoration(            labelText: "Email",            hintText: "test@test.com",            enabled: model.isLoading == false,            errorText: model.emailErrorText),        autocorrect: false,        keyboardType: TextInputType.emailAddress,        textInputAction: TextInputAction.next,        onChanged: model.updateEmail,        onEditingComplete: () => _emailEditingComplete(),      ),      SizedBox(        height: 8,      ),      TextField(        focusNode: _passwordFocusNode,        controller: _passwordEditingController,        decoration: InputDecoration(          labelText: "password",          enabled: model.isLoading == false,          errorText: model.passwordErrorText,        ),        obscureText: true,        onEditingComplete: _submit,        onChanged: model.updatePassword,        textInputAction: TextInputAction.done,      ),      SizedBox(        height: 8,      ),      FormSubmitButton(        text: model.primaryButtonText,        onPressed: model.canSubmit ? _submit : null,      ),      SizedBox(        height: 8,      ),      FlatButton(        child: Text(model.secondaryButtonText),        onPressed: !model.isLoading ? _toggleFormType : null,      ),    ];  }  @override  Widget build(BuildContext context) {          return Padding(            padding: const EdgeInsets.all(20.0),            child: Column(              mainAxisSize: MainAxisSize.min,              children: _buildChildren(),            ),          );  }}